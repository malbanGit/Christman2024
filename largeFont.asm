                    bss      
                    org      sample_ram 

ma_counter1         ds       1 
ma_counter2         ds       1 
ma_counter3         ds       1 
maState             ds       1 
maIntensity         ds       1 

; Spinning
linePrinting        ds       1                            ; count of lines in 16 bit string that is currently printed (rotation) 
angleUse            ds       2                            ; current angle used 
angleTmp            ds       2 
ySpinOffset         ds       1                            ;this is the y position of the center of the spin 
stackSafe           ds       2                            ; save position of stack, S reg is used in spinning routine as auxialry index 
yTempPos            ds       1 
spinCenterScale     ds       1 
rotationSpeed       ds       2 
alternatingRotation  ds      1 

RA_SCALE_DRAW       equ      $60 
RA_SCALE_MOVE       equ      $20 

MA_WIDTH            equ      $40 
MA_HEIGHT           equ      10 
MA_XPOS             equ      -$40 
MA_YPOS             equ      $7f 

MAX_STEP_WIDTH      =        8 
STEP_WIDTH          =        2 
STEP_WIDTH1         =        1 
INC_ANGLE           =        2 

MA_STATE_FADE_IN_MALBAN  =   0 
MA_STATE_FADE_HOLD_MALBAN  =  1 
MA_STATE_FADE_OUT_MALBAN  =  2 
MA_STATE_FADE_IN_PRESENTS  =  3 
MA_STATE_FADE_IN_WHO  =      4 

                    code     

; ***********************************************************************
; ** Intro
; ***********************************************************************

IntroInit 
                    ldd      #0                           ; ten seconds 
                    std      angleUse 
                    std      bigCounter 
                    clr      maState 
                    clr      maIntensity 
; center y position of spin
                    lda      #$5a 
                    sta      ySpinOffset                  ; this is the y position of the center of the spin 
                    clr      alternatingRotation 

                    lda      $7f 
                    sta      spinCenterScale 
                    ldd      #-100 
                    std      rotationSpeed 

                    rts      


IntroPlay 
                    lda      maState 
                    cmpa     #MA_STATE_FADE_IN_WHO 
                    lbeq     introlastStage 

                    cmpa     #MA_STATE_FADE_IN_MALBAN 
                    bne      ma_notFadeIn 
                    lda      maIntensity 
                    adda     #1 
                    sta      maIntensity 
                    lda      maIntensity 
                    cmpa     #$5f 
                    blo      contIntro 
                    inc      maState 
                    ldd      #50                          ; 4 seconds 
                    std      bigCounter 
                    bra      contIntro_5f 


ma_notFadeIn 
                    cmpa     #MA_STATE_FADE_HOLD_MALBAN 
                    bne      ma_notHolding 
                    ldd      bigCounter 
                    subd     #1 
                    std      bigCounter 
                    bne      contIntro_5f 
                    inc      maState 
                    bra      contIntro_5f 


ma_notHolding 
                    cmpa     #MA_STATE_FADE_OUT_MALBAN 
                    bne      ma_notFadeOut 
                    lda      maIntensity 
                    suba     #1 
                    sta      maIntensity 
                    bne      contIntro 
                    inc      maState 
                    bra      contIntro 


ma_notFadeOut 
                    cmpa     #MA_STATE_FADE_OUT_MALBAN 
                    bra      goPresents 


contIntro_5f 
                    lda      #$5f 
contIntro 
                    jsr      Intensity_a 
 
; String drawing Malban
                    lda      #$7f 
                    sta      <VIA_t1_cnt_lo 
                    lda      #-2 
                    sta      Vec_Text_Height 
                    ldu      #someText 
                    lda      #$60 
                    ldb      #-$48 
                    jsr      sync_Print_Str_d_16 

                    lda      maState 
                    cmpa     #MA_STATE_FADE_OUT_MALBAN 
                    beq      MalbanFading 

                    lda      maState 
                    cmpa     #MA_STATE_FADE_IN_PRESENTS 
                    beq      MalbanFading 

                    jsr      Intensity_5F 
MalbanFading 
; image drawing, malban pic
                    lda      #-MA_HEIGHT 
                    sta      Vec_Text_Height 
                    lda      #MA_WIDTH 
                    sta      Vec_Text_Width 

                    LDA      #MA_YPOS                     ; Text position relative Y 
                    LDB      #MA_XPOS                     ; Text position relative X 
                    LDU      #C1_data 
                    jSR      rac_draw_raster_image        ; Vectrex BIOS print routine 
                    rts      


; ***********************
; rotating presents
; ***********************
goPresents: 
; calculate current angle of spin
                    ldd      angleUse 
                    addd     rotationSpeed 
                    std      angleUse 
                    lda      alternatingRotation 
                    bne      doAlternatingRotation 

                    ldd      rotationSpeed 
                    cmpd     #-2 
                    beq      rotationspeedReached 
                    addd     #1 
                    std      rotationSpeed 
                    bra      printDaString 

rotationspeedReached 
                    lda      #2 
                    sta      alternatingRotation 
                    ldd      #2 
                    std      rotationSpeed 

                    ldd      #150 
                    std      bigCounter 

                    bra      printDaString 


doAlternatingRotation 
                    bsr      printPresents 
                    lda      alternatingRotation 
                    cmpa     #2 
                    bne      doAlternate 
                    ldd      angleUse 
                    anda     #1 
                    andb     #255-1 
                    cmpd     #64*2                        ; 64 "angle" == 90 degrees this is a straight PRESENTS 
                    bne      printDaString 
                    lda      #1 
                    sta      alternatingRotation 
                    bra      printDaString 


doAlternate 
                    cmpa     #-1 
                    beq      negativeAlternate 
positiveAlternate 
                    ldd      #2 
                    std      rotationSpeed 
                    ldd      angleUse 
                    anda     #1 
                    andb     #255-1 
                    cmpd     #64*2 +10*2 
                    bne      printDaString 
                    lda      #-1 
                    sta      alternatingRotation 
                    bra      printDaString 

negativeAlternate 
                    ldd      #-2 
                    std      rotationSpeed 
                    ldd      angleUse 
                    anda     #1 
                    andb     #255-1 
                    cmpd     #64*2 -10*2 
                    bne      printDaString 
                    lda      #1 
                    sta      alternatingRotation 
                    bra      printDaString 


printDaString 
                    jsr      Intensity_5F 
                    ldx      #someText2 
                    jsr      displayCenterRotatedString 

                    ldd      bigCounter 
                    subd     #1 
                    std      bigCounter 
                    beq      initLastStage 
                    rts      

initLastStage 
                    lda      #MA_STATE_FADE_IN_WHO 
                    sta      maState 
                    ldd      #400 
                    std      bigCounter 
                    rts      

printPresents 
                    JSR      Intensity_1F 
REPLACE_2_2_PresentsSceneData_varFromBank2_1 
                    ldy      #0 
REPLACE_1_2_drawSmartScene_varFromBank2_55 
                    ldx      #0 
                    jmp      jsrBank3to2 


introlastStage 
                    ldd      bigCounter 
                    subd     #1 
                    std      bigCounter 
                    bne      introStageNotDone 
                    clr      demoRunningFlag 
introStageNotDone 
                    jsr      Intensity_5F 
 
; String drawing Malban
                    lda      #$7f 
                    sta      <VIA_t1_cnt_lo 
                    lda      #-2 
                    sta      Vec_Text_Height 
                    ldu      #xmas 
                    lda      #$60 
                    ldb      #-$7f 
                    jsr      sync_Print_Str_d_16 

                    ldu      #for 
                    lda      #$10 
                    ldb      #-$28 
                    jsr      sync_Print_Str_d_16 

                    ldu      #alex 
                    ldd      -2,u 
                    jsr      sync_Print_Str_d_16 

                    rts      


someText 
                    db       "MALBAN", $80
someText2 
                    db       "PRESENTS", $80
xmas 
                    db       "X-MAS 2024", $80
for 
                    db       "FOR", $80
                    db       -$38, -$50 
torben 
                    db       "TORBEN", $80
                    db       -$38, -$58 
volkmar 
                    db       "VOLKMAR", $80
                    db       -$38, -$58 
daniele 
                    db       "DANIELE", $80
                    db       -$38, -$30 
alex 
                    db       "ALEX", $80
                    db       -$38, -$30 
john 
                    db       "JOHN", $80

; ***********************************************************************
; ** Large Font and print routine
; ***********************************************************************

; format:
; height, width
; shiftreg, ...,  shiftreg
; ....
; shiftreg, ...,  shiftreg
; 
; 16 x 16
font_16_data_shift_0: 
font16start_even: 
; db $10, $77 
;      SPACE        !          "          c          H          %         ...         '         I_          _I         :-)       +          ,          _           .          /          0          1          2          3          4         5           6         7            8         9          :          ;          T          |          T         ?            :-)       A          B          C           D         E           F         G          H           I         J          k           L          M          N         O          P           Q         R          S          T          U          V           W          X         Y          Z                                                                                                                                             
l_01e               dbforward 
l_02e               dbforward 
l_03e               db       %00000000, %00000011, %00011110, %00011111, %00000000, %00111100, %00000000, %00000011, %00000001, %00000001, %00001111, %00000000, %00000000, %00000000, %00000000, %00000000, %00111111, %00001111, %00011111, %00011111, %00111100, %00111111, %00111111, %00011111, %00111111, %00111111, %00000000, %00000000, %00000000, %00000001, %00000000, %00011111, %00001111, %00111111, %00111111, %00111111, %00111111, %00111111, %00111111, %00111111, %00111100, %00011111, %00000111, %00111100, %00111100, %00111111, %00111111, %00111111, %00111111, %00111111, %00111111, %00111111, %00011111, %00111100, %00111100, %00111100, %00111100, %00111100, %00011111, %00000000 ; forward 
l_04e               db       %00000000, %00000011, %00011110, %00111111, %00001100, %00111100, %00000000, %00000011, %00000001, %00000001, %00011111, %00000000, %00000000, %00000000, %00000000, %00000000, %00111111, %00001111, %00011111, %00011111, %00111100, %00111111, %00111111, %00011111, %00111111, %00111111, %00000011, %00000011, %00000000, %00000001, %00000000, %00011111, %00011111, %00111111, %00111111, %00111111, %00111111, %00111111, %00111111, %00111111, %00111100, %00011111, %00000111, %00111100, %00111100, %00111111, %00111111, %00111111, %00111111, %00111111, %00111111, %00111111, %00011111, %00111100, %00111100, %00111100, %00111100, %00111100, %00011111, %00000000 ; forward 
l_05e               db       %00000000, %00000011, %00011110, %00111100, %00011110, %00111100, %00000000, %00000011, %00000001, %00000001, %00111111, %00000001, %00000000, %00000000, %00000000, %00000000, %00111100, %00001111, %00000000, %00000000, %00111100, %00111100, %00111100, %00000000, %00111100, %00111100, %00000011, %00000011, %00000000, %00000001, %00000000, %00000000, %00111111, %00111100, %00111100, %00111111, %00111111, %00111100, %00111100, %00111100, %00111100, %00000011, %00000000, %00111100, %00111100, %00111111, %00111100, %00111100, %00111100, %00111100, %00111100, %00111100, %00000011, %00111100, %00111100, %00111100, %00111110, %00111100, %00000000, %00000000 ; forward 
l_06e               db       %00000000, %00000011, %00011110, %00111000, %00111111, %00111101, %00000000, %00000011, %00000001, %00000011, %00111101, %00000001, %00000000, %00000000, %00000000, %00000001, %00111100, %00001111, %00000000, %00000000, %00111100, %00111100, %00111100, %00000000, %00111100, %00111100, %00000011, %00000011, %00000000, %00000001, %00000000, %00000000, %00111101, %00111100, %00111100, %00111110, %00111111, %00111100, %00111100, %00111100, %00111100, %00000011, %00000000, %00111101, %00111100, %00111111, %00111100, %00111100, %00111100, %00111100, %00111100, %00111100, %00000011, %00111100, %00111100, %00111100, %00111111, %00111100, %00000001, %00000000 ; forward 
l_07e               db       %00000000, %00000011, %00000000, %00110001, %00111111, %00000011, %00000000, %00000011, %00000001, %00000111, %01111101, %00000001, %00000000, %00000000, %00000000, %00000011, %00111100, %00000111, %00111111, %00000011, %00111111, %00111111, %00111111, %00000000, %00011111, %00111111, %00000011, %00000011, %00000000, %00000001, %00000000, %00001111, %01111101, %00111111, %00111111, %00111100, %00111100, %00111111, %00111111, %00111100, %00111111, %00000011, %00000000, %00111111, %00111100, %00111111, %00111100, %00111100, %00111111, %00111100, %00111111, %00111111, %00000011, %00111100, %00111100, %00111101, %00011111, %00111111, %00000011, %00000000 ; forward 
l_08e               db       %00000000, %00000011, %00000000, %00110011, %00011111, %00000111, %00111001, %00000000, %00000000, %11111111, %01101111, %00001111, %00000000, %11111111, %00000000, %00000111, %00111100, %00000011, %00111111, %00000011, %00111111, %00111111, %00111111, %00000001, %00011111, %00111111, %00000000, %00000000, %00000000, %00000001, %11111110, %00001111, %01111111, %00111111, %00111111, %00111100, %00111100, %00111111, %00111111, %00111100, %00111111, %00000011, %00000000, %00111111, %00111100, %00111111, %00111100, %00111100, %00111111, %00111101, %00111111, %00111111, %00000011, %00111100, %00111100, %00111111, %00011111, %00111111, %00000111, %00000000 ; forward 
l_09e               db       %00000000, %00000000, %00000000, %00110011, %00001111, %00001111, %00111001, %00000000, %00000000, %11111110, %01110111, %00001111, %00000000, %11111111, %00000000, %00001111, %00111100, %00000011, %00111100, %00000000, %00000000, %00000000, %00111100, %00000011, %00111100, %00000000, %00000000, %00000000, %00000000, %00000001, %11111111, %00001111, %01101111, %00111100, %00111100, %00111110, %00111100, %00111100, %00111100, %00111100, %00111100, %00000011, %00011000, %00111101, %00111100, %00111111, %00111100, %00111100, %00111100, %00111101, %00111100, %00000000, %00000011, %00111100, %00111100, %00111111, %00111111, %00000000, %00001111, %00000000 ; forward 
l_10e               db       %00000000, %00000000, %00000000, %00110001, %00000111, %00011111, %00000000, %00000000, %00000000, %00000000, %01111000, %00000001, %00000011, %00000000, %00000011, %00011111, %00111100, %00000011, %00111100, %00000000, %00000000, %00000000, %00111100, %00000011, %00111100, %00000000, %00000011, %00000011, %00000001, %00000001, %00000111, %00001111, %01101100, %00111100, %00111100, %00111111, %00111100, %00111100, %00111100, %00111100, %00111100, %00000011, %00111100, %00111100, %00111100, %00111101, %00111100, %00111100, %00111100, %00111101, %00111100, %00000000, %00000011, %00111100, %00111110, %00111111, %00111110, %00000000, %00011111, %00000000 ; forward 
l_11e               db       %00000000, %00000011, %00000000, %00111000, %00000011, %00111111, %00000000, %00000000, %00000000, %00000000, %00111111, %00000001, %00000011, %00000000, %00000011, %00111111, %00111111, %00000011, %00111111, %00111111, %00000000, %00111111, %00111111, %00000011, %00111111, %00001111, %00000011, %00000011, %00000001, %00000001, %00000011, %00000000, %00110111, %00111100, %00111111, %00111111, %00111111, %00111111, %00111100, %00111111, %00111100, %00000011, %00111111, %00111100, %00111111, %00111100, %00111100, %00111111, %00111100, %00111111, %00111100, %00111111, %00000011, %00111111, %00111111, %00111111, %00111100, %00111111, %00111111, %00000000 ; forward 
l_12e               db       %00000000, %00000011, %00000000, %00111100, %00000001, %00111111, %00000000, %00000000, %00000000, %00000000, %00111111, %00000001, %00000011, %00000000, %00000011, %00111111, %00111111, %00000011, %00111111, %00111111, %00000000, %00111111, %00111111, %00000011, %00111111, %00001111, %00000011, %00000011, %00000001, %00000001, %00000001, %00000000, %00111011, %00111100, %00111111, %00111111, %00111111, %00111111, %00111100, %00111111, %00111100, %00000011, %00111111, %00111100, %00111111, %00111100, %00111100, %00111111, %00111100, %00111111, %00111100, %00111111, %00000011, %00111111, %00111111, %00111111, %00111100, %00111111, %00111111, %00000000 ; forward 
l_13e               db       %00000000, %00000011, %00000000, %00111111, %00000000, %00111110, %00000000, %00000000, %00000000, %00000000, %00011111, %00000000, %00000011, %00000000, %00000011, %00111110, %00111111, %00000111, %00111111, %00111111, %00000000, %00111111, %00111111, %00000011, %00111111, %00001111, %00000011, %00000011, %00000001, %00000001, %00000001, %00000110, %00011110, %00111100, %00111111, %00111111, %00111111, %00111111, %00111100, %00111111, %00111100, %00011111, %00111111, %00111100, %00111111, %00111100, %00111100, %00111111, %00111100, %00111111, %00111100, %00111111, %00000011, %00111111, %00011111, %00111111, %00111100, %00111111, %00111111, %00000000 ; forward 
l_14e               db       %00000000, %00000011, %00000000, %00011111, %00000000, %00111100, %00000000, %00000000, %00000000, %00000000, %00001111, %00000000, %00000001, %00000000, %00000000, %00111100, %00111111, %00000111, %00111111, %00111111, %00000000, %00111111, %00111111, %00000011, %00111111, %00001111, %00000000, %00000001, %00000001, %00000001, %00000001, %00000110, %00001111, %00111100, %00111111, %00111111, %00111111, %00111111, %00111100, %00111111, %00111100, %00011111, %00011111, %00111100, %00111111, %00111100, %00111100, %00111111, %00111100, %00111111, %00111100, %00111111, %00000011, %00111111, %00001111, %00111111, %00111100, %00111111, %00111111, %00000000 ; forward 
l_15e               dbforward 
l_16e               dbforward 
font16start_odd: 
l_01o               dbforward 
l_02o               dbforward 
l_03o               db       %00000000, %11110000, %01111000, %11111000, %00000000, %00111100, %00000000, %11000000, %10000000, %10000000, %11110000, %00000000, %00000000, %00000000, %00000000, %00111100, %11111100, %11000000, %11111100, %11111100, %11110000, %11111000, %11100000, %11111100, %11111100, %11111100, %00000000, %00000000, %00000000, %10000000, %00000000, %11111100, %11110000, %11111100, %11111100, %11111000, %11000000, %11111000, %11111000, %11111000, %00111100, %11111000, %11111100, %00111100, %00000000, %00111100, %11111100, %11111100, %11111100, %11111100, %11111100, %11111000, %11111000, %00111100, %00111100, %00001100, %00111100, %00111100, %11111000, %00000000 ; forward 
l_04o               db       %00000000, %11110000, %01111000, %11111100, %00110000, %01111100, %00000000, %11000000, %10000000, %10000000, %11111000, %00000000, %00000000, %00000000, %00000000, %01111100, %11111100, %11000000, %11111100, %11111100, %11110000, %11111000, %11100000, %11111100, %11111100, %11111100, %11000000, %11000000, %00000000, %10000000, %00000000, %11111100, %11111000, %11111100, %11111100, %11111000, %11110000, %11111000, %11111000, %11111000, %00111100, %11111000, %11111100, %01111100, %00000000, %11111100, %11111100, %11111100, %11111100, %11111100, %11111100, %11111000, %11111000, %00111100, %00111100, %00001100, %00111100, %00111100, %11111000, %00000000 ; forward 
l_05o               db       %00000000, %11110000, %01111000, %00111100, %01111000, %11111100, %00000000, %11000000, %10000000, %10000000, %11111100, %10000000, %00000000, %00000000, %00000000, %11111100, %00111100, %11000000, %00111100, %00111100, %11110000, %00000000, %00000000, %00111100, %00111100, %00111100, %11000000, %11000000, %00000000, %10000000, %00000000, %00111100, %11111100, %00111100, %01111100, %00000000, %11111000, %00000000, %00000000, %00000000, %00111100, %11000000, %00111100, %11111100, %00000000, %11111100, %00111100, %00111100, %00111100, %00111100, %00111100, %00000000, %11000000, %00111100, %00111100, %00001100, %01111100, %00111100, %11111000, %00000000 ; forward 
l_06o               db       %00000000, %11110000, %01111000, %00111100, %11111100, %11111100, %00000000, %11000000, %11000000, %10000000, %10111100, %10000000, %00000000, %00000000, %00000000, %11111100, %00111100, %11000000, %00111100, %00111100, %11110000, %00000000, %00000000, %01111100, %00111100, %00111100, %11000000, %11000000, %00000000, %10000000, %00000000, %00111100, %10111100, %00111100, %11111100, %00000000, %11111100, %00000000, %00000000, %00000000, %00111100, %11000000, %00111100, %11111100, %00000000, %11111100, %00111100, %00111100, %00111100, %00111100, %00111100, %00000000, %11000000, %00111100, %00111100, %00001100, %11111100, %00111100, %11110000, %00000000 ; forward 
l_07o               db       %00000000, %11100000, %00000000, %11111100, %11111100, %11111000, %00000000, %10000000, %11100000, %10000000, %10111110, %10000000, %00000000, %00000000, %00000000, %11111000, %00111100, %11000000, %11111100, %11111000, %11111000, %11111100, %11111100, %11111100, %11111000, %11111100, %11000000, %11000000, %00000000, %10000000, %00000000, %11111100, %10111110, %11111100, %11111000, %00000000, %01111100, %11000000, %10000000, %11111100, %11111100, %11000000, %00111100, %11111000, %00000000, %11111100, %00111100, %00111100, %11111100, %00111100, %11111000, %11111100, %11000000, %00111100, %00111100, %11101100, %11111000, %11111100, %11100000, %00000000 ; forward 
l_08o               db       %00000000, %11000000, %00000000, %11111100, %11111000, %11110000, %10011100, %00000000, %11111111, %00000000, %11110110, %11110000, %00000000, %11111111, %00000000, %11110000, %00111100, %11000000, %11111100, %11111000, %11111000, %11111100, %11111100, %11111100, %11111000, %11111100, %00000000, %00000000, %01111111, %10000000, %00000000, %11111100, %11111110, %11111100, %11111000, %00000000, %00111100, %11000000, %10000000, %11111100, %11111100, %11000000, %00111100, %11111000, %00000000, %11111100, %00111100, %00111100, %11111100, %11111100, %11111000, %11111100, %11000000, %00111100, %00111100, %11111100, %11111000, %11111100, %11000000, %00000000 ; forward 
l_09o               db       %00000000, %00000000, %00000000, %11111100, %11110000, %11100000, %10011100, %00000000, %01111111, %00000000, %11101110, %11110000, %00000000, %11111111, %00000000, %11100000, %00111100, %11000000, %00000000, %00111100, %11110000, %00111100, %00111100, %11111000, %00111100, %00111100, %00000000, %00000000, %11111111, %10000000, %00000000, %10000000, %11110110, %00111100, %11111100, %00000000, %00111100, %00000000, %00000000, %00111100, %00111100, %11000000, %00111100, %11111100, %00000000, %11111100, %00111100, %00111100, %00000000, %11111100, %00111100, %00111100, %11000000, %00111100, %00111100, %11111100, %11111100, %00111100, %10000000, %00000000 ; forward 
l_10o               db       %00000000, %00000000, %00000000, %11111100, %11100000, %11000000, %00000000, %00000000, %00000000, %00000000, %00011110, %10000000, %11000000, %00000000, %11000000, %11000000, %00111100, %11000000, %00000000, %00111100, %11110000, %00111100, %00111100, %11110000, %00111100, %00111100, %11000000, %11000000, %11100000, %10000000, %10000000, %00000000, %00110110, %00111100, %01111100, %00000000, %00111100, %00000000, %00000000, %00111100, %00111100, %11000000, %00111100, %01111100, %00000000, %11101100, %00111100, %00111100, %00000000, %11111100, %00111100, %00111100, %11000000, %00111100, %01111100, %11111100, %01111100, %00111100, %00000000, %00000000 ; forward 
l_11o               db       %00000000, %11000000, %00000000, %00111100, %11000000, %10111100, %00000000, %00000000, %00000000, %00000000, %01111100, %10000000, %11000000, %00000000, %11000000, %10000000, %11111100, %11000000, %11111100, %11111100, %11110000, %11111100, %11111100, %11100000, %11111100, %11111100, %11000000, %11000000, %11000000, %10000000, %10000000, %00000000, %11101100, %00111100, %11111100, %11111100, %11111100, %11111100, %00000000, %11111100, %00111100, %11000000, %11111100, %01111100, %11111100, %00001100, %00111100, %11111100, %00000000, %11111000, %00111100, %11111100, %11000000, %11111100, %11111100, %11111100, %00111100, %11111100, %11111100, %00000000 ; forward 
l_12o               db       %00000000, %11000000, %00000000, %00111100, %10000000, %00111100, %00000000, %00000000, %00000000, %00000000, %10111100, %10000000, %11000000, %00000000, %11000000, %00000000, %11111100, %11000000, %11111100, %11111100, %11110000, %11111100, %11111100, %11000000, %11111100, %11111100, %11000000, %11000000, %10000000, %10000000, %10000000, %00000000, %11011100, %00111100, %11111100, %11111100, %11111100, %11111100, %00000000, %11111100, %00111100, %11000000, %11111100, %00111100, %11111100, %00001100, %00111100, %11111100, %00000000, %11111000, %00111100, %11111100, %11000000, %11111100, %11111100, %11111100, %00111100, %11111100, %11111100, %00000000 ; forward 
l_13o               db       %00000000, %11000000, %00000000, %11111100, %00000000, %00111100, %00000000, %00000000, %00000000, %00000000, %11111000, %00000000, %11000000, %00000000, %11000000, %00000000, %11111100, %11100000, %11111100, %11111100, %11110000, %11111100, %11111100, %11000000, %11111100, %11111100, %11000000, %11000000, %10000000, %10000000, %10000000, %00000000, %01111000, %00111100, %11111100, %11111100, %11111100, %11111100, %00000000, %11111100, %00111100, %11111000, %11111100, %00111100, %11111100, %00001100, %00111100, %11111100, %00000000, %11111000, %00111100, %11111100, %11000000, %11111100, %11111000, %11111100, %00111100, %11111000, %11111100, %00000000 ; forward 
l_14o               db       %00000000, %11000000, %00000000, %11111000, %00000000, %00111100, %00000000, %00000000, %00000000, %00000000, %11110000, %00000000, %11000000, %00000000, %00000000, %00000000, %11111100, %11100000, %11111100, %11111100, %11110000, %11111100, %11111100, %11000000, %11111100, %11111100, %00000000, %11000000, %10000000, %10000000, %10000000, %00000000, %11110000, %00111100, %11111100, %11111100, %11111000, %11111100, %00000000, %11111100, %00111100, %11111000, %11111100, %00111100, %11111100, %00001100, %00111100, %11111100, %00000000, %00111000, %00111100, %11111100, %11000000, %11111100, %11110000, %00111100, %00111100, %11110000, %11111100, %00000000 ; forward 
l_15o               dbforward 
l_16o               dbforward 

FONT16_HEIGHT       EQU      16 
FONT16_LENGTH       EQU      ((l_02e-l_01e)) 
FONT16_START_A_EVEN  EQU     l_01e - ' '                  ; // space is 1 
FONT16_START_A_ODD  EQU      l_01o - ' '                  ; // space is 1 
FONT16_END          EQU      FONT16_START_A_EVEN+(FONT16_HEIGHT-1)*FONT16_LENGTH 

ODD_EVEN_OFFSET     EQU      (font16start_odd-font16start_even) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; zero delay is needed for zeroing to work correctly
; depends on the distance of the current integrator position to actual zero point
; experiment with my vectri:
;ZERO ing the integrators takes time. Measures at my vectrex show e.g.:
;If you move the beam with a to x = -127 and y = -127 at diffferent scale values, the time to reach zero:
;- scale $ff -> zero 110 cycles
;- scale $7f -> zero 75 cycles
;- scale $40 -> zero 57 cycles
;- scale $20 -> zero 53 cycles
ZERO_DELAY_P        EQU      2                            ; delay 7 counter is exactly 111 cycles delay between zero SETTING and zero unsetting (in moveto_d) 
                    direct   $d0 

sync_Print_Str_d_fixed_16 
sync_Print_Str_d_16                                       ;#isfunction  
; put move position on stack put it so, that we can load "d" directly from stack
                    pshs     d 
                    STU      Vec_Str_Ptr                  ;Save string pointer 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    LDX      #FONT16_START_A_EVEN         ;Point to start of chargen bitmaps 
                    LDY      #FONT16_START_A_ODD          ;Point to start of chargen bitmaps 
                    lda      #$cc 
                    sta      <VIA_cntl                    ; store zeroing values to cntl 
next_line_a_16: 
; zero
                    ldd      #(%10000010)*256+$00         ; zero the integrators 
; reset integrators
                                                          ;;;; clr <VIA_port_a ; reset integrator offset 
                                                          ; lda #%10000010 
; wait that zeroing surely has the desired effect!
                    stb      <VIA_port_a 
                    sta      <VIA_port_b 
                    ldb      #ZERO_DELAY_P                ; and wait for zeroing to be actually done 
                    inca     
                    sta      <VIA_port_b 
zeroLoop_a_16: 
                                                          ;;;; sta <VIA_port_b ; while waiting, zero offsets 
                    decb     
                    bne      zeroLoop_a_16 
                                                          ;;;; inc <VIA_port_b 
                    ldd      ,s 
;;;;;;;
                    MY_MOVE_TO_D_START  
                    LDU      Vec_Str_Ptr                  ;Point to start of text string 
                    MY_MOVE_TO_A_END  
;;;;;;;
Print_Str_a_16: 
                    LDD      #$1881                       ;AUX: b→ORB: $8x = Disable RAMP, Disable Mux, mux sel = 01 (int offsets) 
                    STB      <VIA_port_b                  ;ramp off/on set mux to channel 1 
                    STA      <VIA_aux_cntl                ;Shift reg mode = 110 (shift out under system clock), T1 PB7 disabled, one shot mode 
                    CLR      <VIA_port_a                  ;Clear D/A output 
                                                          ; first entry here, ramp is disabled 
                                                          ; if there was a jump from below 
                                                          ; ramp will be enabled by next line 
PLAYERONESIZE       =        0x58                         ; SIZE OF FONT - HORIZONTALLY 
                    DEC      <VIA_port_b                  ;Enable mux 
                    ldd      #PLAYERONESIZE*256+01 
                    INC      <VIA_port_b                  ;Disable mux 
                    STA      <VIA_port_a                  ;Send it to the D/A 
                    STb      <VIA_port_b                  ;[4]enable RAMP, disable mux (start moving) 
                    BRA      LF4CB_a16                    ;[3] 


; one letter is drawn (one row that is) in 18 cycles
; 13 cycles overhead
; ramp is thus active for #ofLetters*18 + 13 cycles
LF4C7_a16: 
                    LDb      A,X                          ;[+5]Get bitmap from chargen table 
                    STb      <VIA_shift_reg               ;[+4]rasterout of char bitmap "row" thru shift out in shift register 

                    ldb      a,y                          ;5 
                    tfr      a,a                          ; 6 
                    brn      0                            ; 3 
                    STb      <VIA_shift_reg               ; 4 

LF4CB_a16: 
                    LDA      ,U+                          ;[+6]Get next character 
                    BPL      LF4C7_a16                    ;[+3]Go back if not terminator 
                    CMPX     #FONT16_END                  ;[4]Check for last row 
                    BEQ      LF50A_a16                    ;[3]Branch if last row 
                    LEAX     FONT16_LENGTH,X              ;[3]Point to next chargen row 
                    LEAY     FONT16_LENGTH,Y              ;[3]Point to next chargen row 
                    LDD      #$98cc 
                    STD      <VIA_aux_cntl                ;PB7 enabled 
                    lda      Vec_Text_Height 
                    adda     ,s 
                    sta      ,s 
                    BRA      next_line_a_16               ;Go back for next scan line 


LF50A_a16: 
                    ldd      #$98 
                    sta      <VIA_shift_reg 
                    STb      <VIA_aux_cntl                ;T1→PB7 enabled 
                    puls     d ,pc                        ; all done, correct stack 

; ***********************************************************************
; ** Malban C1 image display
; ***********************************************************************

ZERO_DELAY          EQU      1                            ; delay 7 counter is exactly 111 cycles delay between zero SETTING and zero unsetting (in moveto_d) 
                    direct   $d0 
rac_draw_raster_image: 
; put move position on stack put it so, that we can load "d" directly from stack
                    pshs     b 
                    pshs     a 
                    lda      ,u+                          ; load line counter 
                    sta      ma_counter1                  ; height counter 
                    lda      ,u+                          ; load line width 
                    sta      ma_counter2                  ; width counter 
                    sta      ma_counter3                  ; width counter (work) 
; setup VIA raster routine
; setup rampin with auxControl 
rac_next_line: 
                    lda      ma_counter2                  ; reload line width 
                    sta      ma_counter3 
; zero
                    ldb      #$CC                         ; zero the integrators 
                    stb      <VIA_cntl                    ; store zeroing values to cntl 
                    ldb      #ZERO_DELAY                  ; and wait for zeroing to be actually done 
; reset integrators
                    clr      <VIA_port_a                  ; reset integrator offset 
                    lda      #%10000010 
; wait that zeroing surely has the desired effect!
rac_zeroLoop: 
                    sta      <VIA_port_b                  ; while waiting, zero offsets 
                    decb     
                    bne      rac_zeroLoop 
                    inc      <VIA_port_b 
; unzero is done by moveto_d
                    lda      #RA_SCALE_MOVE 
                    sta      <VIA_t1_cnt_lo 
                    ldd      0,s 
;                    jsr      Moveto_d 
;;;;;; move to d as direct code start
                    STA      VIA_port_a                   ;Store Y in D/A register 
                    LDA      #$CE                         ;Blank low, zero high? 
                    STA      VIA_cntl                     ; 
                    CLRA     
                    STA      VIA_port_b                   ;Enable mux 
                    STA      VIA_shift_reg                ;Clear shift regigster 
                    INC      VIA_port_b                   ;Disable mux 
                    STB      VIA_port_a                   ;Store X in D/A register 
                    STA      VIA_t1_cnt_hi                ;enable timer 
                    lda      #-4                          ; optimized correct adder for next scan line 
                    adda     0,s                          ; done befor wait loop of move to d 
                    sta      0,s 
                    lda      #RA_SCALE_DRAW               ; preload next scale 
                    LDB      #$40                         ; 
rac_m2d:            BITB     VIA_int_flags                ; 
                    BEQ      rac_m2d                      ; 
;;;;;; move to d as direct code end
                    sta      <VIA_t1_cnt_lo 
; ensure y int does nothing
                    lda      #%10000001                   ; mux disabled, mux sel = y int 
                    sta      <VIA_port_b                  ; to via b 
                    clr      <VIA_port_a                  ; ensure dac is 0 
                    dec      <VIA_port_b                  ; enable mux 
                    nop                                   ; delay 
                    inc      <VIA_port_b                  ;disable mux 
                    lda      #$18                         ; a = $18, 
                    sta      <VIA_aux_cntl                ; $18: T1 OneSHotMode WITHOUT Ramp control, Shift out under System clock 
                    lda      Vec_Text_Width               ; get width 
                    sta      <VIA_port_a                  ; Send it to the D/A 
                    lda      #$01                         ; a = $01 
                    sta      <VIA_port_b                  ; Enable RAMP, disable mux 
; output is ongoing! (RAMP is enabled)
                    ldb      ma_counter3                  ; [5] 
                    nop                                   ; [2] wait 
                    nop                                   ; [2] wait 
rac_oneShiftOutForward: 
                    lda      ,u+                          ; [6] get bitmap (shiftreg-data) from raster table 
                    sta      <VIA_shift_reg               ; [4] This loop needs to have exactly 18 cycles (8*2+2) 
                                                          ; one complete shiftreg output takes 16 cycles (8*2) + 2 cycles since VIA needs some rest 
                    bra      rac_dummy1                   ; [3] 


rac_dummy1: 
                    decb                                  ; [2] 
                    bne      rac_oneShiftOutForward       ; [3] go back if not done for line 
                    nop                                   ; [2] delay 2 to finish last shiftout 
                    stb      <VIA_shift_reg               ; [4] b is 0 now, switch of shift 
; don't bother about ramp and dac, in the next round all will be resetted
                    lda      #$98                         ; EXIT routine 
                    sta      <VIA_aux_cntl                ; T1->PB7 enabled 
                    dec      ma_counter1                  ; check for last row 
                    bne      rac_next_line                ; branch if not last row 
                    puls     d                            ; all done, correct stack 
                    rts      


; **************************************************************************
; ** spinning a string
; **************************************************************************

FONT_LENGTH_BIOS    EQU      80 
FONT_START_BIOS     EQU      Char_Table -$20              ; // space is 1 
FONT_END_BIOS       EQU      Char_Table_End -$20 

USE_LARGE_FONT      =        1 

ONE_STRING_LINE_BIOS  macro  
                    bra      startShift3\? 

nextChar3\? 
                    lda      a,u 
                    STA      <VIA_shift_reg               ;[+4]rasterout of char bitmap "row" thru shift out in shift register 
startShift3\? 
                    lda      ,x+                          ;[6] 
                    bpl      nextChar3\? 
                    ldb      #$CC                         ; zero the integrators 
                    stb      <VIA_cntl                    ; store zeroing values to cntl 
                    cmpu     #FONT_END_BIOS 
                    beq      stringRotatePrintDone 
                    leax     -(STRLEN+1),x                ; start of String (9 = stringlength + 1) 
                    LEAU     FONT_LENGTH_BIOS, u          ;Point to next "row" of font bitmap 
                    lda      #%10000001 
                    clr      <VIA_port_a 
                    sta      <VIA_port_b 
                    bra      nextRotateStringLine 

                    endm     

ONE_STRING_LINE_LARGE  macro  
                    bra      startShift3\? 

nextChar3\? 
                    ldb      a,u 
                    STb      <VIA_shift_reg               ;[+4]rasterout of char bitmap "row" thru shift out in shift register 
                    leas     ODD_EVEN_OFFSET,u            ;8 
                    ldb      a,s                          ;5 sneaky reuse of stack as an addition index pointer 
                    STb      >VIA_shift_reg               ; 5 
startShift3\? 
                    lda      ,x+                          ;[6] 
                    bpl      nextChar3\? 
                    ldb      #$CC                         ; zero the integrators 
                    stb      <VIA_cntl                    ; store zeroing values to cntl 
                    cmpu     #FONT16_END 
                    beq      stringRotatePrintDone 
                    leax     -(STRLEN+1),x                ; start of String (9 = stringlength + 1) 
                    LEAU     FONT16_LENGTH, u             ; Point to next "row" of font bitmap 

                    lda      #%10000001 
                    clr      <VIA_port_a 
                    sta      <VIA_port_b 
                    bra      nextRotateStringLine 

                    endm     

; **************************************************************************
STRLEN              =        8 
; in x pointer to string
; angle in "angle"
; fixed string length of "8"
; in x pointer to string 
; angle in "angleUse" 
; fixed string length of "8" 
; expects zeroed on entry 
; leaves with VIA_aux set to $18 ("normal" is $98) 
; y used for circle data 
; x used for font
; s used for offset data
; u used for chartable 
displayCenterRotatedString 
; string is printed with "angleUse" angle
; the beam is positioned to that angle +/- some offsets

                    ldb      #$CC                         ; zero the integrators 
                    stb      <VIA_cntl                    ; store zeroing values to cntl 
                    LDb      #%10000001 
                    STb      <VIA_port_b                  ;[4]disable RAMP, disable mux 
                    sts      stackSafe 
                    clr      linePrinting 
;;;;;;;;;;;;;;
 if  USE_LARGE_FONT == 1 
                    LDU      #FONT16_START_A_EVEN 
;                    LDY      #FONT16_START_A_ODD
 else  
                    LDU      #FONT_START_BIOS             ;Point to start of chargen bitmaps 
 endif  
;;;;;;;;;;;;;;

nextRotateStringLine 
                    lda      #$98                         ; 0 = shift, 
                    sta      <VIA_aux_cntl 
                    lda      spinCenterScale 
                    sta      <VIA_t1_cnt_lo               ; length of 7,5 letters 

                    lda      ySpinOffset                  ; this is the y position of the center of the spin 
                    sta      <VIA_port_a                  ; 4 
                    clr      <VIA_port_b                  ; 4 
                    nop      4 
                    inc      <VIA_port_b                  ; 4 
                    ldd      #$ce                         ; light OFF, ZERO OFF 
                    sta      <VIA_port_a                  ; 5 
                    sta      <VIA_t1_cnt_hi               ; 4 
                    stb      <VIA_cntl                    ; 
; prepare the "real" angle of the string

 if  USE_LARGE_FONT == 1 
                    lda      #(STRLEN*18)/2*2             ; each char has 16 bits not 8 
 else  
                    lda      #(STRLEN*18)/2               ; now 8 character ...3*18+9 ; 3,5 characters 
 endif  

                    sta      <VIA_t1_cnt_lo               ; length of 7,5 letters 
                    ldy      #wheelcircleData 
                    ldd      angleUse 
                    anda     #1 
                    std      angleTmp 
                    leay     d,y 
                    lds      #printAngleOffsets 
                    lda      #$40 
movetoWaitLoopstwOffset: 
                    bita     <VIA_int_flags 
                    beq      movetoWaitLoopstwOffset 

; now the center position around which we rotate is reached on screen
; 

; get angle to start printing the current line
                    ldb      linePrinting 
                    inc      linePrinting 
                    aslb     
                    ldd      b,s 
                    addd     angleTmp 
                    anda     #1 
                    andb     #$ff-1                       ; if it is odd, then it is a cosinus instead of sinus - which prints the string the wrong way! 
                    std      angleTmp 
                    ldy      #wheelcircleData 
                    leay     d,y 
                    ldd      ,y 
;;;;;;;;;;; move to that position
                    sta      <VIA_port_a                  ; 4 
                    clr      <VIA_port_b                  ; 4 
                    nop      4 
                    inc      <VIA_port_b                  ; 4 
                    stb      <VIA_port_a                  ; 5 
                    ldd      #$ce                         ; light OFF, ZERO OFF 
                    sta      <VIA_t1_cnt_hi               ; 4 
                    stb      <VIA_cntl                    ; 
; prepare the "real" angle of the string
                    ldy      #wheelcircleData 
                    ldd      angleUse 
                    anda     #1 
                    andb     #$ff-1                       ; if it is odd, then it is a cosinus instead of sinus - which prints the string the wrong way! 
                    leay     d,y 
                    lda      #$40 
movetoWaitLoopstw: 
                    bita     <VIA_int_flags 
                    beq      movetoWaitLoopstw 
;;;;;;;;;;;
                    LDb      #%10000001 
                    STb      <VIA_port_b                  ;[4]disable RAMP, disable mux 
                    LDa      #$18 
                    STa      <VIA_aux_cntl                ;Shift reg mode = 110 (shift out under system clock), T1 PB7 disabled, one shot mode 
; load the real angle
; print one line of string
                    LDD      #$CE80                       ;Blank low, zero high 
                    sta      <VIA_cntl                    ; store zeroing values to cntl 
                    lda      ,y                           ; y coordinate 
; inverse - since we are going to "center" from the current position
                    nega     
                    sta      <VIA_port_a                  ;Y To D/A output 
                    STB      <VIA_port_b                  ;ramp off set mux to channel 0, Enable mux (set y) 
                    nop      4 
                    incb                                  ; B = $81 
                    STB      <VIA_port_b                  ;Disable RAMP, set mux to channel 0, disable mux 
                    lda      1,y 
                    nega     
                    STa      <VIA_port_a                  ;Send it to the D/A (X) 
                    LDA      #$01                         ;both to ORB, both ENABLE RAMP, mux off 
                    STA      <VIA_port_b                  ;[4]enable RAMP, disable mux 

 if  USE_LARGE_FONT == 1 
                    ONE_STRING_LINE_LARGE  
 else  
                    ONE_STRING_LINE_BIOS  
 endif  

stringRotatePrintDone 
                    lds      stackSafe 
                    rts      


 if  USE_LARGE_FONT == 1 
printAngleOffsets 
                    dw       -14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6 , 8, 10, 12,14 
 else  
printAngleOffsets 
                    dw       -6, -4, -2, 0, 2, 4, 6 
 endif  
                    include  "WheelData.asm"
